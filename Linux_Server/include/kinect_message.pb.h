// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_message.proto

#ifndef PROTOBUF_kinect_5fmessage_2eproto__INCLUDED
#define PROTOBUF_kinect_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kinect_5fmessage_2eproto();
void protobuf_AssignDesc_kinect_5fmessage_2eproto();
void protobuf_ShutdownFile_kinect_5fmessage_2eproto();

class log_packet;

// ===================================================================

class log_packet : public ::google::protobuf::Message {
 public:
  log_packet();
  virtual ~log_packet();

  log_packet(const log_packet& from);

  inline log_packet& operator=(const log_packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const log_packet& default_instance();

  void Swap(log_packet* other);

  // implements Message ----------------------------------------------

  log_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const log_packet& from);
  void MergeFrom(const log_packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depth = 1;
  inline int depth_size() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 1;
  inline ::google::protobuf::uint32 depth(int index) const;
  inline void set_depth(int index, ::google::protobuf::uint32 value);
  inline void add_depth(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depth() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depth();

  // repeated bytes color = 2;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::std::string& color(int index) const;
  inline ::std::string* mutable_color(int index);
  inline void set_color(int index, const ::std::string& value);
  inline void set_color(int index, const char* value);
  inline void set_color(int index, const void* value, size_t size);
  inline ::std::string* add_color();
  inline void add_color(const ::std::string& value);
  inline void add_color(const char* value);
  inline void add_color(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& color() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_color();

  // repeated double body = 3;
  inline int body_size() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline double body(int index) const;
  inline void set_body(int index, double value);
  inline void add_body(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      body() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_body();

  // @@protoc_insertion_point(class_scope:log_packet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depth_;
  ::google::protobuf::RepeatedPtrField< ::std::string> color_;
  ::google::protobuf::RepeatedField< double > body_;
  friend void  protobuf_AddDesc_kinect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_kinect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_kinect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static log_packet* default_instance_;
};
// ===================================================================


// ===================================================================

// log_packet

// repeated uint32 depth = 1;
inline int log_packet::depth_size() const {
  return depth_.size();
}
inline void log_packet::clear_depth() {
  depth_.Clear();
}
inline ::google::protobuf::uint32 log_packet::depth(int index) const {
  // @@protoc_insertion_point(field_get:log_packet.depth)
  return depth_.Get(index);
}
inline void log_packet::set_depth(int index, ::google::protobuf::uint32 value) {
  depth_.Set(index, value);
  // @@protoc_insertion_point(field_set:log_packet.depth)
}
inline void log_packet::add_depth(::google::protobuf::uint32 value) {
  depth_.Add(value);
  // @@protoc_insertion_point(field_add:log_packet.depth)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
log_packet::depth() const {
  // @@protoc_insertion_point(field_list:log_packet.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
log_packet::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:log_packet.depth)
  return &depth_;
}

// repeated bytes color = 2;
inline int log_packet::color_size() const {
  return color_.size();
}
inline void log_packet::clear_color() {
  color_.Clear();
}
inline const ::std::string& log_packet::color(int index) const {
  // @@protoc_insertion_point(field_get:log_packet.color)
  return color_.Get(index);
}
inline ::std::string* log_packet::mutable_color(int index) {
  // @@protoc_insertion_point(field_mutable:log_packet.color)
  return color_.Mutable(index);
}
inline void log_packet::set_color(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:log_packet.color)
  color_.Mutable(index)->assign(value);
}
inline void log_packet::set_color(int index, const char* value) {
  color_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:log_packet.color)
}
inline void log_packet::set_color(int index, const void* value, size_t size) {
  color_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:log_packet.color)
}
inline ::std::string* log_packet::add_color() {
  return color_.Add();
}
inline void log_packet::add_color(const ::std::string& value) {
  color_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:log_packet.color)
}
inline void log_packet::add_color(const char* value) {
  color_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:log_packet.color)
}
inline void log_packet::add_color(const void* value, size_t size) {
  color_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:log_packet.color)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
log_packet::color() const {
  // @@protoc_insertion_point(field_list:log_packet.color)
  return color_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
log_packet::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:log_packet.color)
  return &color_;
}

// repeated double body = 3;
inline int log_packet::body_size() const {
  return body_.size();
}
inline void log_packet::clear_body() {
  body_.Clear();
}
inline double log_packet::body(int index) const {
  // @@protoc_insertion_point(field_get:log_packet.body)
  return body_.Get(index);
}
inline void log_packet::set_body(int index, double value) {
  body_.Set(index, value);
  // @@protoc_insertion_point(field_set:log_packet.body)
}
inline void log_packet::add_body(double value) {
  body_.Add(value);
  // @@protoc_insertion_point(field_add:log_packet.body)
}
inline const ::google::protobuf::RepeatedField< double >&
log_packet::body() const {
  // @@protoc_insertion_point(field_list:log_packet.body)
  return body_;
}
inline ::google::protobuf::RepeatedField< double >*
log_packet::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:log_packet.body)
  return &body_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kinect_5fmessage_2eproto__INCLUDED
